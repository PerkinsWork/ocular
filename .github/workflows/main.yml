name: CI

on: ["push", "pull_request"]

concurrency:
  group: "pages"
  cancel-in-progress: false

permissions:
  contents: write
  pages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  OCULAR_GENESIS_HOST: /api

jobs:
  build:
    name: Build app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.15.0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup ESLint cache
        uses: actions/cache@v4
        with:
          path: ./.eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('**/pnpm-lock.yaml', '**/eslint.config.mjs') }}

      - name: Run eslint
        run: pnpm lint

      - name: Build app
        run: pnpm build

      - name: Build docs
        run: pnpm docs:build

      - name: Run unit tests
        run: pnpm test

      - name: Install playwright browsers
        run: pnpm exec playwright install --with-deps firefox

      - name: Run e2e tests
        run: pnpm test:e2e

      - name: Upload docs build
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: docs-build
          path: docs/.vitepress/dist
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ failure() }}
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  publish_docs:
    if: github.ref == 'refs/heads/main'
    name: Publish docs
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download docs build
        uses: actions/download-artifact@v4
        with:
          name: docs-build
          path: docs-build

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs-build

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish_release:
    if: startsWith(github.event.ref, 'refs/tags/v')
    name: Publish new release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4

      - name: Extract changes
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: ${{ steps.changelog.outputs.changes }}

  build_docker:
    if: startsWith(github.event.ref, 'refs/tags/v')
    name: Build and publish docker image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=raw,value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            OCULAR_GENESIS_HOST=${{ env.OCULAR_GENESIS_HOST }}
            OCULAR_BUILD_VERSION=${{ github.ref_name }}
            OCULAR_BUILD_SHA=${{ steps.vars.outputs.sha_short }}
